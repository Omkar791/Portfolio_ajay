import React from 'react'
import '../../BlogPages/Blogpages.css'
import Navbar from '../../Navbar'
import Footer from '../../Footer'
import imgOne from '../../../assets/4AccountPentest/one.png'
import imgTwo from '../../../assets/4AccountPentest/two.png'
import imgThree from '../../../assets/4AccountPentest/three.png'
import imgFour from '../../../assets/4AccountPentest/four.png'
import imgFive from '../../../assets/4AccountPentest/five.png'
import imgSix from '../../../assets/4AccountPentest/six.png'


const myText1=`
openssl x509 -inform DER -in cacert.der -out cacert.pem
openssl x509 -inform PEM -subject_hash_old -in cacert.pem | head -1
9a5ba575.     #output hash value 
mv cacert.pem 9a5ba575.0        # change name  
`

const myText2=`
adb root
adb remount
adb push 9a5ba575.0 /sdcard/
`

const myText3=`
mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/
chmod 644 /system/etc/security/cacerts/9a5ba575.0
`





const AccountPentesting = () => {
  return (
    <div>
        <Navbar/>
        <div className='BlogpageWrapper'>

            <h1>Android Pentesting Setup On Macbook M1</h1>
            <p>Hello hackers,</p>

            <p>
            As we know for Andriod pentesting we need Physical device or emulator. when i Started learning Andriod Pentesting i refer some videos And Blogs on internet everyone suggesting Genymotion emulator. after using it sometime i noticed its x-86 based Architecture so we cant test x-64 based Architecture Apps. also in Flutter based apps they have inbuit security for ssl pinning. recently i moved to Macbook m1 for my full time pentesting. M1 chips doesn’t support virtulization so there is no Virtualbox. And Gennymotion has dependency of virtualbox. without virtualbox its not gonna work. After some research i found better way than Gennymotion
            </p>
            <p>for Emulator i Choose Andriod Studio. Andriod Studio have their virtual devices. Download latest Andriod studio from their Official Site. for installation you can refer any Youtube video its Simple.</p>

            <h3>Android Studio Bumblebee 2021.1.1 Patch 3</h3>

            <p>
                <a href='https://developer.android.com/studio?gclid=CjwKCAjw3cSSBhBGEiwAVII0Z4hEm14aycDbNNrS0fAwH9rI-Ge77EObpqD6V_6DnppYgICNQEfk7BoCKPkQAvD_BwE&gclsrc=aw.ds'>
                https://developer.android.com/studio?gclid=CjwKCAjw3cSSBhBGEiwAVII0Z4hEm14aycDbNNrS0fAwH9rI-Ge77EObpqD6V_6DnppYgICNQEfk7BoCKPkQAvD_BwE&gclsrc=aw.ds
                </a>
            </p>

            <p>After installation Open Andriod Studio and create One device</p>
            <img src={imgOne} />

            <p>I choose Pixel2 API level — 32 arm64-v8a</p>
            <img src={imgTwo} />

            <p>Every Mordern app support this Configuration.</p>

            <p>After creating Device copy the device name on clipboard. go to this Path. /Users/yourName/Library/Android/sdk/emulator and then open Emulator with this command ./emulator -avd Pixel2 -writable-system</p>
            <p>
            Pixel2 is my customize device name in your case it will be different To find your device name use this command ./emulator -list-avds and -writable -system is very imp to install burp certificate
            </p>

            <img src={imgThree} />

            <p>Most Important part Comes here Installation of Burpsuite Certificate as system level Trusted CA this is permeant solution to SSL pinning.</p>

            <p>
            All Trusted CA are stored in this path /system/etc/security/cacerts in Andriod. root privileges with some modification allows us to add our certificate here
            </p>

            <p>
            Export and convert the Burp CA The first step is to get the Burp CA in the right format. Using Burp Suite, export the CA Certificate in DER format. I saved it as cacert.der
            </p>

            <img src={imgFour} />
            <p>
            Android wants the certificate to be in PEM format, and to have the filename equal to the subject_hash_old value appended with .0.
            </p>

            <p>
            Use openssl to convert DER to PEM, then output the subject_hash_old and rename the file:
            </p>

            <div className='command-div'>
                <pre>{myText1}</pre>
            </div>

            <p>
            Copy the certificate to the device We can use adb to copy the certificate over, but since it has to be copied to the /system filesystem, we have to remount it as writable. As root, this is easy with adb remount.
            </p>

            <p>
            ./emulator -avd Pixel2 -writable-system. # for this -writable-system is IMP
            </p>

            <div className='command-div'>
                <pre>{myText2}</pre>
            </div>

            <p>
            The just drop into a shell (adb shell) and move the file to /system/etc/security/cacerts and chmod it to 644:
            </p>

            <div className='command-div'>
                <pre>{myText3}</pre>
            </div>

            <p>Now reboot emulator with adb reboot and Start proxying with Burpsuite</p>
            <p>
            copy IVP4 address of machine open Extended control in emulator then go to the proxy tab — Manual Proxy Configuration — Hostname and Port name as per your. Burpsuite Configuration.
            </p>

            <img src={imgFive} />
            <img src={imgSix} />

            <p>We are good to go now.</p>

            <h3>Happy Hacking …..!</h3>





        </div>

        <Footer/>
    </div>
  )
}

export default AccountPentesting